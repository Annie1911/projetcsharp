@page "/compte/inscrire"
@using Microsoft.AspNetCore.Mvc.Rendering

<PageTitle>Inscriptions</PageTitle>



<div class="offset-3 mt-3">
    <h3>Veuillez-vous Inscrire</h3>

    <div class="">
        <EditForm Model="InscrireDto" FormName="Inscription" OnValidSubmit="Inscription">
            <DataAnnotationsValidator />
            @if(Error is not null)
            {
                <div class="alert alert-danger alert-dismissible" role="alert">
                    <strong>@Error</strong>
                </div>
            }
            
            <div class="form-group mb-3">
                <label for="NomComplet" class="form-label">Nom complete</label>
                <InputText id="NomComplet" class="form-control" placeholder="Votre nom complete" @bind-Value="InscrireDto.NomComplet" />
                <ValidationMessage For="() => InscrireDto.NomComplet" />
            </div>
            <div class="form-group mb-3">
                <label for="Email" class="form-label">E-mail</label>
                <InputText id="Email" class="form-control" placeholder="Votre E-mail" @bind-Value="InscrireDto.EmailAddress" />
                <ValidationMessage For="() => InscrireDto.EmailAddress" />
            </div>
            <div class="form-group mb-3">
                <label for="Adresse" class="form-label">Adresse</label>
                <InputText id="Adresse" class="form-control" placeholder="Votre Adresse" @bind-Value="InscrireDto.Adresse" />
                <ValidationMessage For="() => InscrireDto.Adresse" />
            </div>
            <div class="form-group mb-3">
                <label for="Role" class="form-label">Role</label>
                <InputSelect id="Role" class="form-control" @bind-Value="InscrireDto.Role" TValue="string">
                    <option></option>
                    @foreach(var role in Roles)
                    {
                        <option value="@role.Value">@role.Text</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => InscrireDto.Role" />
            </div>
            <div class="row mb-3">
                <div class="form-group col-md-6">
                    <label for="Password" class="form-label">Mot de passe</label>
                    <InputText id="Password" class="form-control" type="password" placeholder="Votre mot de passe" @bind-Value="InscrireDto.Password" />
                    <ValidationMessage For="() => InscrireDto.Password" />
                </div>
                <div class="form-group col-md-6">
                    <label for="ConfirmPassword" class="form-label">Confirmer mot de passe</label>
                    <InputText id="ConfirmPassword" class="form-control" type="password" placeholder="Confirmer votre mot de passe" @bind-Value="InscrireDto.ConfirmPassword" />
                    <ValidationMessage For="() => InscrireDto.ConfirmPassword" />
                </div>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-outline-dark" @onclick="@Inscription">S'inscrire</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InscriptionDTO InscrireDto { get; set; } = new();

    private string? Error;

    private List<SelectListItem> Roles = new List<SelectListItem>()
    {
       new SelectListItem { Text = "Participant", Value = "Participant" },
       new SelectListItem { Text = "Auteur", Value = "Auteur" },
    };

    public async Task Inscription()
    {
        var result = await compteService.InscriptionAsync(InscrireDto);
        if(result.Flag)
        {
            InscrireDto = new();
            nvm.NavigateTo("/compte/connexion");
        }
        Error = result.Message;
    }
}
